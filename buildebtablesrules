#!/bin/bash

# version 1.6.7.2018

# added ipv6 support
# needs to be in ${base}/vps.ip6map
# add another gateway in dhcpd.conf using ###option routers
# disable bw limit (tc limit)

base="$(readlink -f "$(dirname "$0")")";

if [ -x /admin/resolvconf ]; then
	/admin/resolvconf > /dev/null 2>&1
fi

if [ -e /usr/sbin/vzctl ]; then
	exit;
fi

if [ ! -x /usr/local/sbin/ebtables ] && [ ! -x /sbin/ebtables ]; then
	   echo 'neither /usr/local/sbin/ebtables nor /sbin/ebtables exist or is not executable';
	   exit;
fi

#debug
#LOG='--log --log-level=7 --log-prefix DEBUG --log-ip --log-ip6 --log-arp';

# don't run on qs
check=`crontab -l | grep qs_cron | grep -v "^#"`;
if [ ! "$check" = "" ]; then
	echo "#skipping for qs";
	echo "/admin/kvmenable ebflush"
	if [ -e /sbin/service ]; then
		echo "# stopping cgroups and ksm";
		service ksm stop > /dev/null 2>&1
		service ksmtuned stop > /dev/null 2>&1
		chkconfig ksm off > /dev/null 2>&1
		chkconfig ksmtuned off > /dev/null 2>&1
	fi
	exit;
fi

if [ -e /root/_disableebtables ]; then
	exit;
fi

debug=0;
#beta packet limit
limit=10000;

if [ -e /etc/dhcp/dhcpd.vps ]; then
	DHCPVPS=/etc/dhcp/dhcpd.vps
else
	DHCPVPS=/etc/dhcpd.vps
fi

#/etc/dhcpd.conf

if [ -e /etc/dhcp/dhcpd.conf ]; then
	DHCPCONF=/etc/dhcp/dhcpd.conf
else
	DHCPCONF=/etc/dhcpd.conf
fi




#check libvirtd is running
if [ -e /etc/redhat-release ]; then
	service='libvirtd';
	if [ -e /usr/bin/systemctl ]; then
		check=`ps auxw | grep "libvirtd" | grep -v grep`;
	else
		check=`ps auxw | grep "libvirtd --daemon" | grep -v grep`;
	fi
else
	check=`ps auxw | grep -e "sbin/libvirtd" -e "libvirtd -d" | grep -v grep`;
	service='libvirt-bin';
fi

if [ "$check" = "" ]; then
		echo "#Libvirtd is not running";

		sleep 1s;
	if [ -e /usr/bin/systemctl ]; then
		 systemctl restart libvirtd.service
	else
service $service restart
	fi

		check2=`ps auxw | grep -e sbin/libvirt -e "libvirtd --daemon" | grep -v grep`;
		if [ "$check" = "" ]; then
				echo "Libvirtd did not restart, emailing";
				hostname=`hostname`
				date=`date`;
				echo "Libvirtd is not running on $hostname at $date" | mail -s "libvirt on $hostname not running" hardware@interserver.net
				exit;
		else
				echo "#Libvirtd is running again";
		fi
else

		echo "#Libvirtd is running";
fi
#endcheck


# interface
hostname=`hostname`
if [ "$hostname" = "kvm1.trouble-free.net" -o "$hostname" = "kvm2.interserver.net" -o "$hostname" = "kvm50.interserver.net" ]; then
		eth=eth1;
elif [ -e /etc/debian_version ]; then
	if [ -e /sys/class/net/p2p1 ]; then
		eth=p2p1;
	elif  [ -e /sys/class/net/em1 ]; then
		eth=em1;
	else
		eth=eth0;
	fi
elif [ -e /etc/redhat-release ]; then
	#enp11s0f0
	if [ -e /sys/class/net/enp9s0f0 ]; then
		eth=enp9s0f0;
	elif [ -e /sys/class/net/enp11s0f0 ]; then
		eth=enp11s0f0;
	else
		eth=eth0;
	fi
else
		eth=eth0;
fi
echo "#eth is $eth"

#bridge
bridge=br0;

# gateway

multi_gw=0;
gw_check=`cat $DHCPCONF  | grep routers | awk '{ print $3 }' | cut -d\; -f1 | wc -l`
if [ "$gw_check" -gt "1" ]; then
	multi_gw=1;
	echo "#more than one gw found"
	#gateways=`cat $DHCPCONF  | grep routers | awk '{ print $3 }' | cut -d\; -f1`;
	gateways=`cat $DHCPCONF  | grep  "^\([^#]*\|\)option routers\|###option routers" | awk '{ print $3 }' | cut -d\; -f1`;
fi

# ipv6 addition
ipv6=0;
if [ -e /etc/sysconfig/network-scripts/ifcfg-br0 ]; then
	ip6_gw=`cat /etc/sysconfig/network-scripts/ifcfg-br0  | grep ^IPV6_DEFAULTGW | cut -d= -f2`;
elif [ -e /etc/network/interfaces ]; then
	ip6_gw=`cat /etc/network/interfaces | grep gateway | grep : | awk '{ print $2 }'`;
fi
if [ ! "$ip6_gw" = "" ]; then
	ipv6=1;
	echo "#found ipv6 gw of $ip6_gw";
fi

if [ -e /etc/redhat-release ]; then
	gateway=`cat /etc/sysconfig/network-scripts/ifcfg-br0 | grep ^GATEWAY= | cut -d= -f2`;
else
	gateway=`cat /etc/network/interfaces  | grep gateway | awk '{ print $2 }' | grep -v ^gateway | grep -v :`;
fi

if [ "$gateway" = "" ]; then
	gateway=`cat /etc/sysconfig/network | grep ^GATEWAY= | cut -d= -f2 | tr '\n' '\t'`;
	# still blank?
	if [ "$gateway" = "" ]; then
		gateway=`cat /etc/sysconfig/network-scripts/ifcfg-eth0 | grep ^GATEWAY= | cut -d= -f2`;
	fi
fi

export PATH=/usr/local/bin:/usr/local/sbin:$PATH:/sbin

if [ -e /usr/bin/systemctl ] || [ -e /bin/systemctl ]; then
	br=`ifconfig br0 | grep "inet" | grep -v inet6 | cut -d: -f2 | awk '{ print $2 }'`;
else
	br=`ifconfig br0 | grep "inet addr" | cut -d: -f2 | awk '{ print $1 }'`;
fi

if [ "$DEBUG" = "1" ]; then
	echo "Found br0 on $br and gateway $gateway on eth $eth"
fi


# maybe we want --all?
list=`/usr/bin/virsh list | grep running | awk '{ print $2 }'`

# output script header
if [ ! "$debug" = "1" ]; then
	cat <<EOF
#!/bin/sh

#Found br0 of $br and gateway $gateway
export PATH=/usr/local/bin:/usr/local/sbin:$PATH:/sbin
/sbin/iptables --flush
iptables -F INPUT
iptables -F OUTPUT
iptables -F FORWARD
# beta packet limit
if [ -e /limitpacket ]; then
	iptables -X LOGGING
	echo "1" > /proc/sys/net/bridge/bridge-nf-call-iptables
	ruleid=0;
fi
echo "1" > /proc/sys/net/ipv4/ip_forward
/sbin/iptables -P INPUT ACCEPT
/sbin/iptables -P OUTPUT ACCEPT
/sbin/iptables -P FORWARD ACCEPT
/sbin/iptables -A INPUT -i lo -j ACCEPT
iptables -I FORWARD -m physdev --physdev-is-bridged -j ACCEPT
ebtables -F
ebtables -X
ebtables -P INPUT ACCEPT
ebtables -P OUTPUT ACCEPT
ebtables -P FORWARD ACCEPT
EOF
	# end script header
fi

if [ -f /cloud ]; then
	echo "#quickserver exiting";
	exit;
fi

#VMS
#http://serverfault.com/questions/334139/how-to-prevent-ip-spoofing-using-mac-and-ebtables
echo "#ebtables vms chain";
echo "ebtables -N VMS"
echo "ebtables -P VMS DROP"


# this outputs all the protection for each individual server
for user in $list; do

	# instead below we skip by not specifying a mac
	#if [ -e /scripts/_tmp/ebtables/$user ]; then
	#	echo "#SKIPPING user $user to to /scripts/_tmp/ebtables/$user";
	#	continue
	#fi

	mac=`/usr/bin/virsh dumpxml $user | grep "mac" | grep address | grep : | cut -d\' -f2 | head -n 1`;
	dev=`/usr/bin/virsh dumpxml $user | grep target | grep dev | grep vnet | cut -d\' -f2 | head -n 1`;
	# improve getting the ip in the future
	ip=`cat $DHCPVPS  | grep "$mac" | awk '{ print $8 }' | cut -d\; -f1`;
	if [ -z "$ip" ]; then
		echo "echo \"VPS $user Device $dev MAC $mac Got a Blank IP\";"
			continue;
	fi
	if [ "$debug" = "1" ]; then
		echo "found user $user"
		echo "	found mac $mac"
		echo "	found dev $dev"
		echo "	found ip $ip"
	else

		###
		# Main Rules
		###

		echo "# MAIN RULES"
		echo "# begin $user"
		echo "# $user allow arp, $gateway is gw and $ip is ip of server. $dev changes as well based on server"

		# multi gw
		if [ "$multi_gw" = "1" ]; then
			for gw in $gateways; do
				echo "ebtables -A FORWARD -p ARP --arp-ip-src $gw --arp-ip-dst $ip -i $eth -o $dev $LOG -j ACCEPT"
				echo "ebtables -A FORWARD -p ARP --arp-ip-src $ip --arp-ip-dst $gw -i $dev -o $eth $LOG -j ACCEPT"
			done
		fi

		# we still run this in multi gw form
		echo "ebtables -A FORWARD -p ARP --arp-ip-src $gateway --arp-ip-dst $ip -i $eth -o $dev $LOG -j ACCEPT"
		echo "ebtables -A FORWARD -p ARP --arp-ip-src $ip --arp-ip-dst $gateway -i $dev -o $eth $LOG -j ACCEPT"

		echo "ebtables -A FORWARD -p ARP --arp-ip-src $br --arp-ip-dst $ip -i $eth -o $dev $LOG -j ACCEPT"
				echo "ebtables -A FORWARD -p ARP --arp-ip-src $ip --arp-ip-dst $br -i $dev -o $eth $LOG -j ACCEPT"
		# new addition
				echo "# new addition"
				echo "ebtables -A FORWARD -p ARP -s $mac --arp-ip-src $ip -i $dev -o $eth $LOG -j ACCEPT"
				echo "ebtables -A FORWARD -p ARP -s $mac --arp-ip-src $ip -i $eth -o $dev $LOG -j ACCEPT"
				# end

				echo "#VMS main rules"
				echo "ebtables -A FORWARD -p ip -i $dev -j VMS"
		if [ -e /scripts/_tmp/ebtables/$user ]; then
			echo "ebtables -A VMS -p ip --ip-src $ip $LOG -j ACCEPT"
			echo "ebtables -A VMS -p ip --ip-src $ip $LOG -j ACCEPT"
		else
			echo "ebtables -A VMS -p ip --ip-src $ip -s $mac $LOG -j ACCEPT"
						echo "ebtables -A VMS -p ip --ip-src $ip -s $mac $LOG -j ACCEPT"
		fi
		  if [ -e /limitpacket ]; then
				echo "#beta packet limit"
						ruleid=`expr $ruleid + 1`
						echo "iptables -I FORWARD $ruleid -m physdev --physdev-in $dev -o $bridge -s $ip -m limit --limit $limit/sec -j ACCEPT"
						ruleid=`expr $ruleid + 1`
						echo "iptables -I FORWARD $ruleid -m physdev --physdev-in $dev -o $bridge -s $ip -j DROP"
				  fi

		###
		# EXTRA IPS Rules
		###
		#if vps.ipmap is blank we are ignoring this function
		ipcheck=`grep . ${base}/vps.ipmap`;
		if [ ! "$ipcheck" = "" ]; then
			ips="$(grep "^$ip:" ${base}/vps.ipmap | cut -d: -f2)"
			for extraip in $ips; do
				echo "# EXTRA IPS Rules"
				echo "# $user allow arp, $gateway is gw and $extraip is ip of server. $dev changes as well based on server"
				if [ "$multi_gw" = "1" ]; then
					for gw in $gateways; do
						echo "ebtables -A FORWARD -p ARP --arp-ip-src $gw --arp-ip-dst $extraip -i $eth -o $dev $LOG -j ACCEPT"
											echo "ebtables -A FORWARD -p ARP --arp-ip-src $extraip --arp-ip-dst $gw -i $dev -o $eth $LOG -j ACCEPT"
					done

				fi
				# still run even in multi_gw
				echo "ebtables -A FORWARD -p ARP --arp-ip-src $gateway --arp-ip-dst $extraip -i $eth -o $dev $LOG -j ACCEPT"
				echo "ebtables -A FORWARD -p ARP --arp-ip-src $extraip --arp-ip-dst $gateway -i $dev -o $eth $LOG -j ACCEPT"

				echo "ebtables -A FORWARD -p ARP --arp-ip-src $br --arp-ip-dst $extraip -i $eth -o $dev $LOG -j ACCEPT"
						echo "ebtables -A FORWARD -p ARP --arp-ip-src $extraip --arp-ip-dst $br -i $dev -o $eth $LOG -j ACCEPT"
				# new addition
								echo "# new addition"
								echo "ebtables -A FORWARD -p ARP -s $mac --arp-ip-src $extraip -i $dev -o $eth $LOG -j ACCEPT"
								echo "ebtables -A FORWARD -p ARP -s $mac --arp-ip-src $extraip -i $eth -o $dev $LOG -j ACCEPT"
								# end
						echo "#VMS extra"
				if [ -e /scripts/_tmp/ebtables/$user ]; then
							echo "ebtables -A VMS -p ip --ip-src $extraip $LOG -j ACCEPT"
							echo "ebtables -A VMS -p ip --ip-src $extraip $LOG -j ACCEPT"
				else
					echo "ebtables -A VMS -p ip --ip-src $extraip -s $mac $LOG -j ACCEPT"
										echo "ebtables -A VMS -p ip --ip-src $extraip -s $mac $LOG -j ACCEPT"
				fi
				if [ -e /limitpacket ]; then
					echo "#beta packet limit"
					ruleid=`expr $ruleid + 1`
					echo "iptables -I FORWARD $ruleid -o $eth -s $extraip -m limit --limit $limit/sec -j ACCEPT"
					ruleid=`expr $ruleid + 1`
					echo "iptables -I FORWARD $ruleid -o $eth -s $extraip -j DROP"
				fi

			done
		fi

		###
		# Ping Local VM Rules
		###
		# new IP PING remote VM
		#ALLOW MYIP:OTHERIP:VPSID
		if [ -e ${base}/tmp/$user ]; then
			data=`grep ^ALLOW ${base}/tmp/$user | cut -d" " -f2-`;
			if [ ! "$data" = "" ]; then
				amyip=`echo $data | cut -d: -f1`;
				atheirip=`echo $data | cut -d: -f2`;
				avpsid=`echo $data | cut -d: -f3`;
				adev=`/usr/bin/virsh dumpxml $avpsid | grep target | grep dev | grep vnet | cut -d\' -f2`;

				echo "#allow IP Ping to remote VM"
				echo "ebtables -A FORWARD -p ARP --arp-ip-src $amyip --arp-ip-dst $atheirip -i $dev -o $adev $LOG -j ACCEPT"
			fi
		fi
		#end

		###
		# Spoof Protect Rules
		###
		echo "# $user mac spoof protect"
		if [ -e /scripts/_tmp/ebtables/$user ]; then
					echo "#SKIPPING user $user to to /scripts/_tmp/ebtables/$user";
			echo "ebtables -A FORWARD -i $dev $LOG -j ACCEPT"
						echo "# $user IP PROTECT"
						echo "ebtables -A FORWARD -p IPv4 --ip-src $ip $LOG -j ACCEPT"
						if [ ! "$ips" = "" ]; then
								for extraip in $ips; do
										echo "ebtables -A FORWARD -p IPv4 --ip-src $extraip $LOG -j ACCEPT"
								done
						fi
		else
			echo "ebtables -A FORWARD -i $dev -s ! $mac $LOG -j DROP"
			echo "# $user IP PROTECT"
			echo "ebtables -A FORWARD -p IPv4 --ip-src $ip -s ! $mac $LOG -j DROP"
			if [ ! "$ips" = "" ]; then
				for extraip in $ips; do
					echo "ebtables -A FORWARD -p IPv4 --ip-src $extraip -s ! $mac $LOG -j DROP"
				done
			fi
		fi

		if [ "$ipv6" = "1" ]; then
			if [ -e ${base}/vps.ip6map ]; then
				ip6ips=`cat ${base}/vps.ip6map | grep ^$user | cut -d"|" -f2`;
				if [ ! "$ip6ips" = "" ]; then
					for ip6ip in $ip6ips; do
						echo "#found ipv6 for $user ip is $ip6ip";
						echo "ebtables -A FORWARD -p IPv6 -s $mac --ip6-src $ip6ip -i $dev -o $eth $LOG -j ACCEPT"
						echo "ebtables -A FORWARD -p IPv6 -s $mac --ip6-src $ip6ip -i $eth -o $dev $LOG -j ACCEPT"
						echo "ebtables -A FORWARD -p IPv6 -s $mac --ip6-dst $ip6ip -i $dev -o $eth $LOG -j ACCEPT"
											echo "ebtables -A FORWARD -p IPv6 -s $mac --ip6-dst $ip6ip -i $eth -o $dev $LOG -j ACCEPT"

						echo "ebtables -A FORWARD -p IPv6 -d $mac --ip6-src $ip6ip -i $dev -o $eth $LOG -j ACCEPT"
											echo "ebtables -A FORWARD -p IPv6 -d $mac --ip6-src $ip6ip -i $eth -o $dev $LOG -j ACCEPT"
											echo "ebtables -A FORWARD -p IPv6 -d $mac --ip6-dst $ip6ip -i $dev -o $eth $LOG -j ACCEPT"
											echo "ebtables -A FORWARD -p IPv6 -d $mac --ip6-dst $ip6ip -i $eth -o $dev $LOG -j ACCEPT"

						if [ -e /scripts/_tmp/ebtables/$user ]; then
										echo "#SKIPPING user $user to to /scripts/_tmp/ebtables/$user";
							echo "ebtables -A FORWARD -p IPv6 --ip6-src $ip6ip -s $LOG -j ACCEPT"
						else
							echo "ebtables -A FORWARD -p IPv6 --ip6-src $ip6ip -s ! $mac $LOG -j DROP"
						fi
					done
				fi
			fi
		fi
		if [ -e /scripts/_tmp/ebtables/$user ]; then
			echo 'ebtables -A FORWARD -p ARP -i $eth -o $dev $LOG -j ACCEPT'
			echo 'ebtables -A FORWARD -p ARP -i $dev -o $eth $LOG -j ACCEPT'
		fi
		echo "# end $user"
		echo

	fi
done

###
# Disable ARP
###

# output final line / footer that disable's arp
if [ ! "$debug" = "1" ]; then
	echo '# DISABLE ARP Rules';
	echo '# dump arp (seems to solve arping ip stealing, what is the draw back?)'
	if [ ! -f /scripts/_tmp/ebtables/nodump ]; then
	echo 'ebtables -A FORWARD -p ARP $LOG -j DROP'
	# does not work
	#echo '#disable ipv6 for non matches';
	#--log-ip6
	echo 'ebtables -A FORWARD -p IPv6 $LOG -j DROP';
	fi
	###
	# Block SMTP
	###
	# additional for SMTP disable
	#if [ -e /scripts/_tmp/smtp/ ]; then
	#	cd /scripts/_tmp/smtp
	#	for i in `ls`; do
	#		if [ ! "$i" = "" ]; then
	#			echo '# smtp blocks';
	#			echo "/admin/kvmenable blocksmtp $i"
	#		fi
	#	done
	#fi

	###
	# Block IPs
	###
	# additional for ip blocks
	if [ -e /scripts/_tmp/blockip/ ]; then
		cd /scripts/_tmp/blockip
		for i in `ls`; do
						if [ ! "$i" = "" ]; then
								echo '# block ips';
								echo "/admin/kvmenable blockip $i"
						fi
				done
		fi

fi


if [ -e /proxyarp ]; then
	echo "#enabling proxy arp"
	echo "echo 1 > /proc/sys/net/ipv4/conf/$eth/proxy_arp"
	echo "echo 1 > /proc/sys/net/ipv4/conf/$bridge/proxy_arp"
fi

#if [ -e ${base}/limitbw ]; then
#	if [ ! -e /nolimitbw ]; then
#		echo "#limiting bandwidth"
#		echo "${base}/limitbw"
#	fi
#fi

if [ -e /limitpacket ]; then
		echo "#beta packet limit"
		echo "iptables -N LOGGING"
		echo "iptables -A FORWARD -j LOGGING"
		echo "iptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix "IPTables-Dropped: " --log-level 4"
		echo "iptables -A LOGGING -j DROP"
fi

if [ -e /etc/debian_version ]; then
	echo "${base}/securexinetd";
fi
